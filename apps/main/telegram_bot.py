from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
)
from apps.main.models import Driver, People
from asgiref.sync import sync_to_async

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    button = KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)
    markup = ReplyKeyboardMarkup([[button]], one_time_keyboard=True)
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=markup)

# ORM-—Ñ—É–Ω–∫—Ü–∏–∏
@sync_to_async
def get_driver_by_phone(phone):
    return Driver.objects.filter(phone_number__icontains=phone).first()

@sync_to_async
def get_driver_by_telegram(tg_id):
    return Driver.objects.filter(telegram_id=tg_id).first()

@sync_to_async
def get_passengers(driver):
    return list(People.objects.filter(driver=driver))

@sync_to_async
def create_placeholder_passenger(tg_id):
    driver = Driver.objects.filter(telegram_id=tg_id).first()
    if not driver:
        return None

    if People.objects.filter(driver=driver).count() >= driver.count:
        return "limit"

    return People.objects.create(
        driver=driver,
        full_name="..................",
        phone=".................."
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    phone = contact.phone_number.replace("+", "").replace(" ", "")
    tg_id = update.effective_user.id

    driver = await get_driver_by_phone(phone)
    if driver:
        driver.telegram_id = tg_id
        await sync_to_async(driver.save)()

        markup = ReplyKeyboardMarkup([
            ["üìã –°–ø–∏—Å–æ–∫ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞"]
        ], resize_keyboard=True)

        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {driver.full_name_driver}! –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.",
            reply_markup=markup
        )
    else:
        await update.message.reply_text("–í–∞—à –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤"
async def show_passengers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = update.effective_user.id
    driver = await get_driver_by_telegram(tg_id)
    if not driver:
        await update.message.reply_text("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ !")
        return

    passengers = await get_passengers(driver)
    if not passengers:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤.")
        return

    msg = "\n".join([f"{i+1}. {p.full_name} ‚Äî {p.phone}" for i, p in enumerate(passengers)])
    await update.message.reply_text(f"–í–∞—à–∏ –ø–∞—Å—Å–∞–∂–∏—Ä—ã:\n{msg}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞"
async def send_input_template(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = update.effective_user.id
    result = await create_placeholder_passenger(tg_id)

    if result == "limit":
        await update.message.reply_text("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤.")
    elif result:
        await update.message.reply_text("‚úÖ –ü–∞—Å—Å–∞–∂–∏—Ä –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å.\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ !")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
def create_bot_app():
    TOKEN = "8071056418:AAEcUcGNKYC8yD3gxRF-buNhwgNYM6HbI5k"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.CONTACT, contact_handler))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üìã –°–ø–∏—Å–æ–∫ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤"), show_passengers))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞"), send_input_template))

    return app
